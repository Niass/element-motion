// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Baba /> should pass dom data to child animation 1`] = `
Array [
  Object {
    "destination": Object {
      "element": undefined,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": undefined,
    },
    "origin": Object {
      "element": <div />,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": [Function],
    },
  },
]
`;

exports[`<Baba /> should pass dom data to child animation when using in prop 1`] = `
Array [
  Object {
    "destination": Object {
      "element": undefined,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": undefined,
    },
    "origin": Object {
      "element": <div />,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": [Function],
    },
  },
]
`;

exports[`<Baba /> should pass target dom data to child animation 1`] = `
Object {
  "location": Object {
    "left": 0,
    "top": 0,
  },
  "raw": Object {
    "rect": Object {},
    "scrollLeft": 0,
    "scrollTop": 0,
  },
  "size": Object {
    "height": 200,
    "width": 100,
  },
}
`;

exports[`<Baba /> should render markup in a portal created by multiple animations 1`] = `
Array [
  <Portal
    containerInfo={
      <div>
        <div>
          hello world
        </div>
      </div>
    }
  >
    <div>
      hello world
    </div>
  </Portal>,
  <Portal
    containerInfo={
      <div>
        <span>
          number two
        </span>
      </div>
    }
  >
    <span>
      number two
    </span>
  </Portal>,
]
`;

exports[`<Baba /> should render markup in a portal created in an animation 1`] = `
<Portal
  containerInfo={
    <div>
      <div>
        hello world
      </div>
    </div>
  }
>
  <div>
    hello world
  </div>
</Portal>
`;

exports[`<Baba /> should update markup created in an animation in after animate phase 1`] = `
<Portal
  containerInfo={
    <div>
      <div>
        after animate phase
      </div>
    </div>
  }
>
  <div>
    after animate phase
  </div>
</Portal>
`;

exports[`<Baba /> should update markup created in an animation in animate phase 1`] = `
<Portal
  containerInfo={
    <div>
      <div>
        animate phase
      </div>
    </div>
  }
>
  <div>
    animate phase
  </div>
</Portal>
`;

exports[`<Baba /> should update markup in a portal created by multiple animations in animate phase 1`] = `
Array [
  <Portal
    containerInfo={
      <div>
        <div>
          updated
        </div>
      </div>
    }
  >
    <div>
      updated
    </div>
  </Portal>,
  <Portal
    containerInfo={
      <div>
        <span>
          number two
        </span>
      </div>
    }
  >
    <span>
      number two
    </span>
  </Portal>,
]
`;
