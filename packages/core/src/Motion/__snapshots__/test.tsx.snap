// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Motion /> persisted motions should throw when changing into "in" after initial mount 1`] = `
"@element-motion/core v0.0.0

You're switching between persisted and unpersisted, don't do this. Either always set the \\"in\\" prop as true or false, or keep as undefined."
`;

exports[`<Motion /> self targetted motions should throw when changing into "triggerSelfKey" after initial mount 1`] = `
"@element-motion/core v0.0.0

You're switching between self triggering modes, don't do this. Either always set the \\"triggerSelfKey\\" prop or keep as undefined."
`;

exports[`<Motion /> self targetted motions should throw when using both "in" and "triggerSelfKey" props after initial mount 1`] = `
"@element-motion/core v0.0.0

Don't use \\"in\\" and \\"triggerSelfKey\\" together. If your element is persisted use \\"in\\". If your element is targeting itself for motions use \\"triggerSelfKey\\"."
`;

exports[`<Motion /> should pass dom data to child motion 1`] = `
Array [
  Object {
    "destination": Object {
      "element": <div />,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": [Function],
    },
    "origin": Object {
      "element": <div />,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": [Function],
    },
  },
]
`;

exports[`<Motion /> should pass dom data to child motion when using in prop 1`] = `
Array [
  Object {
    "destination": Object {
      "element": <div />,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": [Function],
    },
    "origin": Object {
      "element": <div />,
      "elementBoundingBox": Object {
        "location": Object {
          "left": 0,
          "top": 0,
        },
        "raw": Object {
          "rect": Object {},
          "scrollLeft": 0,
          "scrollTop": 0,
        },
        "size": Object {
          "height": 200,
          "width": 100,
        },
      },
      "focalTargetElement": undefined,
      "focalTargetElementBoundingBox": undefined,
      "render": [Function],
    },
  },
]
`;

exports[`<Motion /> should pass target dom data to child motion 1`] = `
Object {
  "location": Object {
    "left": 0,
    "top": 0,
  },
  "raw": Object {
    "rect": Object {},
    "scrollLeft": 0,
    "scrollTop": 0,
  },
  "size": Object {
    "height": 200,
    "width": 100,
  },
}
`;

exports[`<Motion /> should render markup in a portal created by multiple motions 1`] = `
Array [
  <Portal
    containerInfo={
      <div>
        <div>
          hello world
        </div>
      </div>
    }
  >
    <div>
      hello world
    </div>
  </Portal>,
  <Portal
    containerInfo={
      <div>
        <span>
          number two
        </span>
      </div>
    }
  >
    <span>
      number two
    </span>
  </Portal>,
]
`;

exports[`<Motion /> should render markup in a portal created in a motion 1`] = `
<Portal
  containerInfo={
    <div>
      <div>
        hello world
      </div>
    </div>
  }
>
  <div>
    hello world
  </div>
</Portal>
`;

exports[`<Motion /> should update markup created in a motion in after animate phase 1`] = `
<Portal
  containerInfo={
    <div>
      <div>
        after animate phase
      </div>
    </div>
  }
>
  <div>
    after animate phase
  </div>
</Portal>
`;

exports[`<Motion /> should update markup created in a motion in animate phase 1`] = `
<Portal
  containerInfo={
    <div>
      <div>
        animate phase
      </div>
    </div>
  }
>
  <div>
    animate phase
  </div>
</Portal>
`;

exports[`<Motion /> should update markup in a portal created by multiple motions in animate phase 1`] = `
Array [
  <Portal
    containerInfo={
      <div>
        <div>
          updated
        </div>
      </div>
    }
  >
    <div>
      updated
    </div>
  </Portal>,
  <Portal
    containerInfo={
      <div>
        <span>
          number two
        </span>
      </div>
    }
  >
    <span>
      number two
    </span>
  </Portal>,
]
`;
